{{>userNav}}
{{>profileLayout}}
<link rel="stylesheet" href="/css/myWallet.css">

<div class="info-section text-dark 
             p-3 mt-5">
    <h2 class=" pb-3 ">Wallet Information</h2>
    <div class="d-flex">


        <div class=" p-sm-1 p-lg-5    rounded-4  m-2 d-inline-block   shadow align-content-center text-center   ">
            <h4><i class="fa-solid fa-wallet"></i> Balance</h4>
            <h4 class="pt-2 pb-2 text-success " id="balance">₹ {{walletData.balance}}</h4>

        </div>
        <div class="mt-auto mb-auto border-1 shadow  p-3  rounded-4  m-2 d-inline-block  ">
            <input type="text" id="amount" class="amount-input form-control" placeholder="Enter Amount">
            <p class="text-danger" id="error"></p>
            <button id="addButton" class="btn btn-success me-5   mt-1    "><i class="fa-solid fa-plus"></i> Add
                Balance</button>
            <div class="spinner-border text-success mt-1 " style="display:none;" id="spinner" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
</div>

<div class="container">
    <div class="header_wrap">
        <div class="num_rows d-flex justify-content-between  ">

            <div class="form-group">
                <select class="form-control" name="state" id="maxRows">
                    <option value="5">5</option>
                    <option value="15">15</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                    <option value="70">70</option>
                    <option value="100">100</option>
                    <option value="5000">Show ALL Rows</option>
                </select>

            </div>
             <div class="tb_search d-flex
             mb-3">
            <input type="text" id="search_input_all" onkeyup="FilterkeyWord_all_table()" placeholder="Search.."
                class="form-control">
        </div>
        </div>
       
    </div>
    <table class="table table-striped table-class" id="table-id">


            <thead>
                <tr>

                    <th>Transaction</th>
                    <th>Date</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                {{#each walletData.transaction}}
                <tr>
                    <td>{{this.type}}</td>
                    <td>{{this.date}}</td>
                    <td>{{this.amount}}</td>
                </tr>
                {{/each}}
            <tbody>
        </table>

        <div class='pagination-container'>
            <nav>
                <ul class="pagination">
                    fghb
                   
                </ul>
            </nav>
        </div>
        <div class="rows_count">Showing 11 to 20 of 91 entries</div>

    </div>

</div>
</div>
</div>
{{>userFooter}}

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="/js/razorpay.js"></script>
<script type="module">

    const rzpKey = 'rzp_test_hZPyhffeqYGexk';

    document.addEventListener('DOMContentLoaded', function () {

        const addBtn = document.getElementById('addButton')

        addBtn.addEventListener('click', function () {

            const amount = document.getElementById('amount').value
            const balance = document.getElementById('balance')
            const error = document.getElementById('error')
            const regex = /^[0-9]+$/;
            error.innerHTML = "";
            const spinner = document.getElementById('spinner')
            spinner.style.display = "block"

            if (amount <= 0) {
                error.innerHTML = "Please enter a valid amount";
                spinner.style.display = "none"
                return;
            } else if (!regex.test(amount)) {

                error.innerHTML = "Please enter a valid amount";
                spinner.style.display = "none"
                return;
            }



            handlePayment(amount)



        })

        function addBalance(amount) {

            fetch('/profile/addbalance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ amount: amount })
            })
                .then(response => {

                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Failed to add balance');
                    }
                })
                .then(data => {
                    console.log('Balance added:', data);

                    swal("Success", "Balance has been added successfully!", "success").then(() => {

                        spinner.style.display = "none"
                        balance.innerHTML = `₹ ${data.walletData.balance}`
                     
                    });
                   
                })
                .catch(error => {
                    console.error('Error:', error);

                    swal("Failed", "An error occurred while adding balance. Please try again.", "error");
                  
                });
        }





        function handlePayment(amount) {


            try {
                const orderurl = '/profile/payment/walletReacharge';

                const response = fetch(orderurl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ amount: amount, }),
                });
                response.then(async response => {

                    const data = await response.json();

                    console.log("data", data.data);

                    initializePayment(data.data);

                }).catch(err => {

                    console.log(err);

                });
            } catch (err) {
                console.log('Error:', err);

            }
        }

        const initializePayment = (paymentData) => {

            console.log("paymentData", paymentData);

            const paymentOptions = {
                key: rzpKey,
                currency: paymentData.currency,
                amount: paymentData.amount,
                name: "OurShop",
                description: "Test Transaction",
                image: "https://i.ibb.co/VM5qVp7/164822577-us-initial-logo-company-name-colored-blue-and-magenta-swoosh-design-isolated-on-white-back.jpg",
                order_id: paymentData.id,
                handler: async (response) => {
                    try {
                        const verifyUrl = '/profile/payment/verify';
                        const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;
                        const body = JSON.stringify({ razorpay_order_id, razorpay_payment_id, razorpay_signature });
                        const verifyResponse = await fetch(verifyUrl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body
                        });
                        const verifyData = await verifyResponse.json();


                        if (verifyData.success) {

                            addBalance(paymentData.amount / 100)




                        }

                    } catch (error) {
                        console.log(error);
                    }
                },
                theme: {
                    color: "blue"
                }
            };
            const paymentObject = new window.Razorpay(paymentOptions);
            paymentObject.open();
        }

        
    })



    getPagination('#table-id');
    $('#maxRows').trigger('change');
    function getPagination(table) {

        $('#maxRows').on('change', function () {
            $('.pagination').html('');						// reset pagination div
            var trnum = 0;									// reset tr counter 
            var maxRows = parseInt($(this).val());			// get Max Rows from select option

            var totalRows = $(table + ' tbody tr').length;		// numbers of rows 
            $(table + ' tr:gt(0)').each(function () {			// each TR in  table and not the header
                trnum++;									// Start Counter 
                if (trnum > maxRows) {						// if tr number gt maxRows

                    $(this).hide();							// fade it out 
                } if (trnum <= maxRows) { $(this).show(); }// else fade in Important in case if it ..
            });											//  was fade out to fade it in 
            if (totalRows > maxRows) {						// if tr total rows gt max rows option
                var pagenum = Math.ceil(totalRows / maxRows);	// ceil total(rows/maxrows) to get ..  
                //	numbers of pages 
                for (var i = 1; i <= pagenum;) {			// for each page append pagination li 
                    $('.pagination').append('<li data-page="' + i + '">\
								      <span>'+ i++ + '<span class="sr-only">(current)</span></span>\
								    </li>').show();
                }											// end for i 


            } 												// end if row count > max rows
            $('.pagination li:first-child').addClass('active'); // add active class to the first li 


            //SHOWING ROWS NUMBER OUT OF TOTAL DEFAULT
            showig_rows_count(maxRows, 1, totalRows);
            //SHOWING ROWS NUMBER OUT OF TOTAL DEFAULT

            $('.pagination li').on('click', function (e) {		// on click each page
                e.preventDefault();
                var pageNum = $(this).attr('data-page');	
                var trIndex = 0;							
                $('.pagination li').removeClass('active');	
                $(this).addClass('active');					


                //SHOWING ROWS NUMBER OUT OF TOTAL
                showig_rows_count(maxRows, pageNum, totalRows);
                //SHOWING ROWS NUMBER OUT OF TOTAL



                $(table + ' tr:gt(0)').each(function () {		
                    trIndex++;								
                  
                    if (trIndex > (maxRows * pageNum) || trIndex <= ((maxRows * pageNum) - maxRows)) {
                        $(this).hide();
                    } else { $(this).show(); } 				
                }); 									
            });										
        });
       

       

    }




    // SI SETTING
    $(function () {
        // Just to append id number for each row  
        default_index();

    });

    //ROWS SHOWING FUNCTION
    function showig_rows_count(maxRows, pageNum, totalRows) {
        //Default rows showing
        var end_index = maxRows * pageNum;
        var start_index = ((maxRows * pageNum) - maxRows) + parseFloat(1);
        var string = 'Showing ' + start_index + ' to ' + end_index + ' of ' + totalRows + ' entries';
        $('.rows_count').html(string);
    }

    // CREATING INDEX
    function default_index() {
        $('table tr:eq(0)').prepend('<th> ID </th>')

        var id = 0;

        $('table tr:gt(0)').each(function () {
            id++
            $(this).prepend('<td>' + id + '</td>');
        });
    }

    // All Table search script
    function FilterkeyWord_all_table() {

        // Count td if you want to search on all table instead of specific column

        var count = $('.table').children('tbody').children('tr:first-child').children('td').length;

        // Declare variables
        var input, filter, table, tr, td, i;
        input = document.getElementById("search_input_all");
        var input_value = document.getElementById("search_input_all").value;
        filter = input.value.toLowerCase();
        if (input_value != '') {
            table = document.getElementById("table-id");
            tr = table.getElementsByTagName("tr");

            // Loop through all table rows, and hide those who don't match the search query
            for (i = 1; i < tr.length; i++) {

                var flag = 0;

                for (j = 0; j < count; j++) {
                    td = tr[i].getElementsByTagName("td")[j];
                    if (td) {

                        var td_text = td.innerHTML;
                        if (td.innerHTML.toLowerCase().indexOf(filter) > -1) {
                            //var td_text = td.innerHTML;  
                            //td.innerHTML = 'shaban';
                            flag = 1;
                        } else {
                            //DO NOTHING
                        }
                    }
                }
                if (flag == 1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        } else {
            //RESET TABLE
            $('#maxRows').trigger('change');
        }
    }


</script>