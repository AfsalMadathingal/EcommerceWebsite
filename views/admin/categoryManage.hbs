<link rel="stylesheet" href="/css/table-user.css">
<link rel="stylesheet" href="/css/responsiveTable.css">
<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<div class="details-section">
<div class="top-options">

 <div class="user1-count m-auto mt-2">
        <h3>Active Category</h3>
        <h2>{{count}}</h2>
    </div>
    
</div>
   
<div class="ms-auto me-auto mt-1">

 <main class="table" id="customers_table">
        <section class="table__header">
            <h1>Category Details</h1>
            
            <div class="input-group1">
                <input type="search" placeholder="Search Data...">
               <i class="fa-solid fa-magnifying-glass bg-transparent "></i>
            </div>
            <div class="export__file" data-bs-toggle="modal" data-bs-target="#exampleModal">
                <label for="export-file" class="export__file-btn" title="Create Category"></label>
                <input type="checkbox" id="export-file">
            </div>

        </section>
        <section class="table__body1">
            <table>
                <thead>
                    <tr>
                        <th> SL <span class="icon-arrow">&UpArrow;</span></th>
                        <th> Category Name <span class="icon-arrow">&UpArrow;</span></th>
                        <th> Products <span class="icon-arrow">&UpArrow;</span></th>
                        <th> Change <span class="icon-arrow">&UpArrow;</span></th>
                    </tr>
                </thead>
                {{#each data}}
                <tbody>
                    <tr data-category-id={{this._id.categoryId}}>
                        <td>{{inc @index}} </td>
                        <td>{{this._id.category}}</td>
                        <td> {{this.totalProducts}} </td>
                        <td> 
                    <button class="btn btn-danger  delete-button"><i class="fa-solid fa-trash "> </i> Delete</button>
                    <button class="btn btn-info  edit-button" data-bs-toggle="modal" data-bs-target="#EditModal"

                        data-bs-category="{{this._id.category}}">
                    
                    
                        <i class="fa-solid fa-pen-to-square"></i>Edit</button>
                    </td>
                    </tr>
                </tbody>
                  {{/each}}
            </table>
        </section>
    </main>


</div>

    {{!-- <div class="table-user ">
        <table class="table  table-hover  user-table-data">

            <thead>
                <tr  >
                    <th scope="col">SL</th>
                    <th scope="col">Category</th>
                    <th scope="col">Total Products</th>
                    <th scope="col">Edit/Change</th>
                </tr>
            </thead>
            {{#each data}}
            <tbody>
                <tr data-category-id={{this._id.categoryId}}>
                    
                    <td>{{@index}}</td>
                    <td>{{this._id.category}}</td>
                    <td>{{this.totalProducts}}</td>
                    <td> 
                    <button class="btn btn-danger  delete-button">Delete</button>
                    <button class="btn btn-info  edit-button" data-bs-toggle="modal" data-bs-target="#EditModal"

                        data-bs-category="{{this._id.category}}">
                    
                    
                        Edit</button>
                    </td>
                </tr>
            </tbody>
            {{/each}}
        </table>

    </div> --}}


{{!-- modal for create category starts --}}




    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
   <div class="modal-content">
      <div class="modal-header bg-dark bg-opacity-50  ">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Create New Category</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form action="/admin/create_category" method="post">
          <div class="mb-3">
            <label for="recipient-name" class="col-form-label">Category Name:</label>
            <input type="text" name="categoryName" placeholder="enter category name" class="form-control" id="recipient-name">
          </div>
        
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="submit" class="btn btn-primary">Create</button>
        </form>
      </div>
    </div>
  </div>
</div>
{{!-- modal for create category end --}}

{{!-- modal for edit category --}}
<div class="modal fade" id="EditModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
   <div class="modal-content">
      <div class="modal-header bg-warning ">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Create New Category</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form action="/admin/edit_category" method="post">
          <div class="mb-3">
            <input  type="hidden" name="categoryName" placeholder="enter category name" class="form-control" id="category-name">
          </div>
          <div class="mb-3">
            <label for="category-name" class="col-form-label">Change to:</label>
            <input type="text" name="newCategoryName" placeholder="enter category name" class="form-control" id="category-name-new">
          </div>
        
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
        <button type="submit" class="btn btn-warning">Save</button>
        </form>
      </div>
    </div>
  </div>
</div>
{{!-- modal for edit category --}}
</div>


</div>
</div>



<script>
   $(document).ready(function () {
    $('.delete-button').on('click', function () {
        // Get the user ID from the data attribute of the clicked row
        const categoryId = $(this).closest('tr').data('category-id');
        // Send data to the server using AJAX
        $.ajax({
            url: '/admin/delete_category', // Replace with your server endpoint
            type: 'POST', // Adjust the HTTP method as needed
            contentType: 'application/json',
            data: JSON.stringify({ categoryId }), // Wrap userId in an object
            success: function (response) {
                // Handle success response from the server
                location.reload();
                console.log('Server response:', response);
            },
            error: function (error) {
                // Handle error response from the server
                console.error('Error:', error);
            }
        });
    });
});

$(document).ready(function () {
    $('.unblock-button').on('click', function () {
        // Get the user ID from the data attribute of the clicked row
        const userId = $(this).closest('tr').data('user-id');
        // Send data to the server using AJAX
        $.ajax({
            url: '/admin/unblock', // Replace with your server endpoint
            type: 'POST', // Adjust the HTTP method as needed
            contentType: 'application/json',
            data: JSON.stringify({ userId }), // Wrap userId in an object
            success: function (response) {
                // Handle success response from the server
                location.reload();
                console.log('Server response:', response);
            },
            error: function (error) {
                // Handle error response from the server
                console.error('Error:', error);
            }
        });
    });
});


const editmodal= document.getElementById('EditModal');

if (editmodal) {

    editmodal.addEventListener('show.bs.modal', event => {
      // Button that triggered the modal
      const button = event.relatedTarget;

      // Extract info from data-bs-* attributes
      const category = button.getAttribute('data-bs-category');
    console.log(category)
      // Update the modal's content.
      const modalTitle = editmodal.querySelector('.modal-title');
      const categoryname = editmodal.querySelector('#category-name');

      modalTitle.textContent = `Edit ${category}`;
      categoryname.value = category; 
     

    }); 
    }



    /**
Responsive HTML Table With Pure CSS - Web Design/UI Design

Code written by:
👨🏻‍⚕️ @Coding Design (Jeet Saru)

> You can do whatever you want with the code. However if you love my content, you can **SUBSCRIBED** my YouTube Channel.

🌎link: www.youtube.com/codingdesign 
*/

const search = document.querySelector('.input-group1 input'),
    table_rows = document.querySelectorAll('tbody tr'),
    table_headings = document.querySelectorAll('thead th');

// 1. Searching for specific data of HTML table
search.addEventListener('input', searchTable);

function searchTable() {
    table_rows.forEach((row, i) => {
        let table_data = row.textContent.toLowerCase(),
            search_data = search.value.toLowerCase();

        row.classList.toggle('hide', table_data.indexOf(search_data) < 0);
        row.style.setProperty('--delay', i / 25 + 's');
    })

    document.querySelectorAll('tbody tr:not(.hide)').forEach((visible_row, i) => {
        visible_row.style.backgroundColor = (i % 2 == 0) ? 'transparent' : '#0000000b';
    });
}

// 2. Sorting | Ordering data of HTML table

table_headings.forEach((head, i) => {
    let sort_asc = true;
    head.onclick = () => {
        table_headings.forEach(head => head.classList.remove('active'));
        head.classList.add('active');

        document.querySelectorAll('td').forEach(td => td.classList.remove('active'));
        table_rows.forEach(row => {
            row.querySelectorAll('td')[i].classList.add('active');
        })

        head.classList.toggle('asc', sort_asc);
        sort_asc = head.classList.contains('asc') ? false : true;

        sortTable(i, sort_asc);
    }
})


function sortTable(column, sort_asc) {
    [...table_rows].sort((a, b) => {
        let first_row = a.querySelectorAll('td')[column].textContent.toLowerCase(),
            second_row = b.querySelectorAll('td')[column].textContent.toLowerCase();

        return sort_asc ? (first_row < second_row ? 1 : -1) : (first_row < second_row ? -1 : 1);
    })
        .map(sorted_row => document.querySelector('tbody').appendChild(sorted_row));
}

// 3. Converting HTML table to PDF

const pdf_btn = document.querySelector('#toPDF');
const customers_table = document.querySelector('#customers_table');


const toPDF = function (customers_table) {
    const html_code = `
    <!DOCTYPE html>
    <link rel="stylesheet" type="text/css" href="style.css">
    <main class="table" id="customers_table">${customers_table.innerHTML}</main>`;

    const new_window = window.open();
     new_window.document.write(html_code);

    setTimeout(() => {
        new_window.print();
        new_window.close();
    }, 400);
}

pdf_btn.onclick = () => {
    toPDF(customers_table);
}

// 4. Converting HTML table to JSON

const json_btn = document.querySelector('#toJSON');

const toJSON = function (table) {
    let table_data = [],
        t_head = [],

        t_headings = table.querySelectorAll('th'),
        t_rows = table.querySelectorAll('tbody tr');

    for (let t_heading of t_headings) {
        let actual_head = t_heading.textContent.trim().split(' ');

        t_head.push(actual_head.splice(0, actual_head.length - 1).join(' ').toLowerCase());
    }

    t_rows.forEach(row => {
        const row_object = {},
            t_cells = row.querySelectorAll('td');

        t_cells.forEach((t_cell, cell_index) => {
            const img = t_cell.querySelector('img');
            if (img) {
                row_object['customer image'] = decodeURIComponent(img.src);
            }
            row_object[t_head[cell_index]] = t_cell.textContent.trim();
        })
        table_data.push(row_object);
    })

    return JSON.stringify(table_data, null, 4);
}

json_btn.onclick = () => {
    const json = toJSON(customers_table);
    downloadFile(json, 'json')
}

// 5. Converting HTML table to CSV File

const csv_btn = document.querySelector('#toCSV');

const toCSV = function (table) {
    // Code For SIMPLE TABLE
    // const t_rows = table.querySelectorAll('tr');
    // return [...t_rows].map(row => {
    //     const cells = row.querySelectorAll('th, td');
    //     return [...cells].map(cell => cell.textContent.trim()).join(',');
    // }).join('\n');

    const t_heads = table.querySelectorAll('th'),
        tbody_rows = table.querySelectorAll('tbody tr');

    const headings = [...t_heads].map(head => {
        let actual_head = head.textContent.trim().split(' ');
        return actual_head.splice(0, actual_head.length - 1).join(' ').toLowerCase();
    }).join(',') + ',' + 'image name';

    const table_data = [...tbody_rows].map(row => {
        const cells = row.querySelectorAll('td'),
            img = decodeURIComponent(row.querySelector('img').src),
            data_without_img = [...cells].map(cell => cell.textContent.replace(/,/g, ".").trim()).join(',');

        return data_without_img + ',' + img;
    }).join('\n');

    return headings + '\n' + table_data;
}

csv_btn.onclick = () => {
    const csv = toCSV(customers_table);
    downloadFile(csv, 'csv', 'customer orders');
}

// 6. Converting HTML table to EXCEL File

const excel_btn = document.querySelector('#toEXCEL');

const toExcel = function (table) {
    // Code For SIMPLE TABLE
    // const t_rows = table.querySelectorAll('tr');
    // return [...t_rows].map(row => {
    //     const cells = row.querySelectorAll('th, td');
    //     return [...cells].map(cell => cell.textContent.trim()).join('\t');
    // }).join('\n');

    const t_heads = table.querySelectorAll('th'),
        tbody_rows = table.querySelectorAll('tbody tr');

    const headings = [...t_heads].map(head => {
        let actual_head = head.textContent.trim().split(' ');
        return actual_head.splice(0, actual_head.length - 1).join(' ').toLowerCase();
    }).join('\t') + '\t' + 'image name';

    const table_data = [...tbody_rows].map(row => {
        const cells = row.querySelectorAll('td'),
            img = decodeURIComponent(row.querySelector('img').src),
            data_without_img = [...cells].map(cell => cell.textContent.trim()).join('\t');

        return data_without_img + '\t' + img;
    }).join('\n');

    return headings + '\n' + table_data;
}

excel_btn.onclick = () => {
    const excel = toExcel(customers_table);
    downloadFile(excel, 'excel');
}

const downloadFile = function (data, fileType, fileName = '') {
    const a = document.createElement('a');
    a.download = fileName;
    const mime_types = {
        'json': 'application/json',
        'csv': 'text/csv',
        'excel': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    }
    a.href = `
        data:${mime_types[fileType]};charset=utf-8,${encodeURIComponent(data)}
    `;
    document.body.appendChild(a);
    a.click();
    a.remove();
}


</script>


<style>

</style>

